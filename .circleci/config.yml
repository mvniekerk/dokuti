#
# *************************************************
# Copyright (c) 2019, Grindrod Bank Limited
# License MIT: https://opensource.org/licenses/MIT
# **************************************************
#

#definition for reuse later
only-tags: &only-tags
  filters:
    tags:
      only: /^.*/
    branches:
      ignore: /.*/

version: 2
jobs:
  generate-axios-client:
    working_directory: ~/repo
    docker:
       - image: openapitools/openapi-generator-cli:latest
    steps:
      - checkout
      - run: mkdir ~/repo/dokuti-typescript-axios
      - run: /usr/local/bin/docker-entrypoint.sh generate -i ~/repo/doc/dokuti_api.yml -g typescript-axios -o ~/repo/dokuti-typescript-axios --model-package=model --api-package=api --additional-properties=withSeparateModelsAndApi=true,modelPropertyNaming=camelCase,npmName=@grindrodbank/${CIRCLE_PROJECT_REPONAME}-api
      - persist_to_workspace:
          root: ~/repo
          paths:
            - dokuti-typescript-axios 
  publish-axios-client:
    working_directory: ~/repo
    docker:
      - image: circleci/node:lts-jessie-browsers-legacy
    steps:
      - attach_workspace:
          at: ~/repo/workspace
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/repo/workspace/dokuti-typescript-axios/.npmrc
      - run:
          name: Add node modules to the NPM ignore file.
          command: echo 'node_modules/' >> ~/repo/workspace/dokuti-typescript-axios/.npmignore
      - run:
          name: Run Yarn
          command: cd ~/repo/workspace/dokuti-typescript-axios && yarn
      - run:
          name: Build with Yarn
          command: cd ~/repo/workspace/dokuti-typescript-axios && yarn build
      - run:
          name: Publish to NPM with Yarn.
          command: cd ~/repo/workspace/dokuti-typescript-axios && yarn publish --access public
  unit-test:
    docker:
      - image: maven:3.5.3-jdk-8-alpine
    working_directory: ~/dokuti-build
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          keys:
            - dokuti-build-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: dokuti-build-{{ checksum "pom.xml" }}

      - run: mvn test
  sonarqube:
    docker:
      - image: maven:3.5.3-jdk-8-alpine
    working_directory: ~/dokuti-sonarqube
    steps:
      - checkout
      - restore_cache:
          keys:
            - dokuti-sonarqube-{{ checksum "pom.xml" }}
      - run: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: dokuti-sonarqube-{{ checksum "pom.xml" }}
      - run: |
         mvn clean
         mvn org.jacoco:jacoco-maven-plugin:prepare-agent \
            package \
            org.jacoco:jacoco-maven-plugin:report \
            sonar:sonar \
                -Dsonar.host.url=https://sonarcloud.io \
                -Dsonar.projectKey=GrindrodBank_dokuti \
                -Dsonar.organization=grindrodbank \
                -Dsonar.login=$SONAR_AUTH_TOKEN \
                -Dsonar.branch.name=$CIRCLE_BRANCH \
                -Dsonar.exclusions=srcgen/**/* \
                -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      - store_artifacts:
         path:  target          
  tagged-docker-build:
    docker:
      - image: docker
    working_directory: ~/dokuti-docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      # build and push Docker image to dockerhub.
      - run: |
          export TAG=${CIRCLE_TAG:-untagged}
          docker build -t grindrodbank/dokuti:$TAG .     
          docker login -u $DOCKER_USER -p $DOCKER_PASS
          docker push grindrodbank/dokuti:$TAG
          # Tag and push latest
          docker tag grindrodbank/dokuti:$TAG grindrodbank/dokuti:latest
          docker push grindrodbank/dokuti:latest
  fossa-scan:
    docker:
      - image: golang:1.10.0-stretch
    working_directory: ~/dokuti-build
    steps:
      # Install Fossa
      - run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | bash
      # Install Maven
      - run: apt-get update
      - run: apt-get -y install maven
      - checkout
      - run: fossa init
      - run: FOSSA_API_KEY=$FOSSA_API_KEY fossa analyze
      # Note: The 'fossa test' command must be run after the analyze command has been run, as it is dependent on the previous scan.
      - run: fossa test
workflows:
  version: 2
  untagged_build_test:
    jobs:
      - generate-axios-client
      - unit-test
      - sonarqube
      - fossa-scan:
          filters:    
            branches:    
              only: master


  tagged_build_push:
    jobs:
      - unit-test: *only-tags
      - sonarqube:
          requires:
          - unit-test
          <<: *only-tags
      - fossa-scan: *only-tags
      - generate-axios-client: *only-tags
      - tagged-docker-build:
          requires:
          - unit-test
          - sonarqube
          - fossa-scan
          - generate-axios-client
          <<: *only-tags
      - publish-axios-client:
          requires:
          - unit-test
          - sonarqube
          - fossa-scan
          - generate-axios-client
          - tagged-docker-build
          <<: *only-tags
